services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: thrifting_buddy_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: thriftingbuddy
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: thrifting_buddy
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U thriftingbuddy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: thrifting_buddy_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.backend
    container_name: thrifting_buddy_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      # Override DATABASE_URL to use container names instead of localhost
      DATABASE_URL: postgresql://thriftingbuddy:dev_password_123@postgres:5432/thrifting_buddy
      REDIS_URL: redis://:redis_dev_123@redis:6379
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm start

  # Frontend Web Application
  frontend:
    image: thrifting-buddy/frontend:latest
    container_name: thrifting_buddy_frontend
    restart: unless-stopped
    ports:
      - "8080:80"  # Internal port for direct access if needed
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (containerized with config)
  nginx:
    image: thrifting-buddy/nginx:latest
    container_name: thrifting_buddy_nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    networks:
      - default
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mobile App Web Server (production containerized)
  mobile-web:
    image: thrifting-buddy/mobile-web:latest
    container_name: thrifting_buddy_mobile_web
    restart: unless-stopped
    ports:
      - "19006:19006"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: thrifting_buddy_network