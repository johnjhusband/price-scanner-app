name: Deploy Staging
on:
  push:
    branches: [staging]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to green.flippi.ai
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: 157.245.142.145
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/green.flippi.ai
            # Reset any local changes to avoid merge conflicts
            git reset --hard HEAD
            git clean -fd
            # Handle divergent branches by force resetting to remote
            git fetch origin
            git reset --hard origin/staging
            
            # Install dependencies and build
            cd backend && npm install --production
            
            # Build frontend with timeout and error handling
            cd ../mobile-app
            echo "Installing mobile app dependencies..."
            npm install || { echo "npm install failed"; exit 1; }
            
            echo "Building frontend with Expo..."
            timeout 300 npx expo export --platform web --output-dir dist || {
              echo "Expo build failed or timed out after 5 minutes"
              echo "Checking if dist exists anyway..."
              if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
                echo "dist exists with files, continuing..."
              else
                echo "No dist directory or empty, build failed!"
                exit 1
              fi
            }
            
            # Apply OAuth nginx fix IMMEDIATELY after build
            echo "=== Applying OAuth fix ==="
            if [ -f scripts/fix-staging-oauth-verbose.sh ]; then
              echo "Running VERBOSE nginx OAuth fix..."
              bash scripts/fix-staging-oauth-verbose.sh
            elif [ -f scripts/fix-staging-nginx-oauth.sh ]; then
              echo "Running nginx OAuth fix for staging..."
              bash scripts/fix-staging-nginx-oauth.sh
            else
              echo "ERROR: OAuth fix script not found!"
              ls -la scripts/
            fi
            
            # Apply post-deployment nginx configuration for legal pages
            if [ -f scripts/post-deploy-nginx.sh ]; then
              echo "=== Applying nginx configuration for legal pages ==="
              bash scripts/post-deploy-nginx.sh
            fi
            
            # Fix nginx SSL configuration comprehensively
            cd /var/www/green.flippi.ai && bash scripts/fix-nginx-ssl-comprehensive.sh || true
            
            # Debug: Check what directory PM2 is serving from
            echo "=== PM2 staging-frontend config ==="
            pm2 describe staging-frontend | grep -E "exec cwd|script|args" || true
            echo "=== Checking directories ==="
            ls -la /var/www/green.flippi.ai/mobile-app/ | grep -E "dist|web-build" || true
            echo "=== Files in dist ==="
            ls -la /var/www/green.flippi.ai/mobile-app/dist/ | head -5 || true
            
            # Just restart, don't delete
            pm2 restart staging-backend staging-frontend
            
            # Wait for services to start
            sleep 3
            
            # Check if backend is running
            pm2 show staging-backend || true
            curl -s http://localhost:3001/health || echo "Backend not responding"
            
            # Check OAuth status (but don't fail deployment)
            echo "=== Checking OAuth Status ==="
            OAUTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -I https://green.flippi.ai/auth/google)
            echo "OAuth endpoint returns: $OAUTH_STATUS"
            if [ "$OAUTH_STATUS" = "302" ] || [ "$OAUTH_STATUS" = "301" ]; then
              echo "✅ OAuth is working!"
            else
              echo "⚠️ OAuth still returns $OAUTH_STATUS - may need time to propagate"
            fi
            
            # Output OAuth fix log
            echo "=== OAuth Fix Log Contents ==="
            cat /tmp/oauth-fix-* 2>/dev/null || echo "⚠️ No OAuth fix log found"
            echo "=== End OAuth Fix Log ==="
            
            # Final OAuth test
            echo "=== Final OAuth Status Check ==="
            curl -I https://green.flippi.ai/auth/google
            
            # Clear nginx cache
            nginx -s reload
