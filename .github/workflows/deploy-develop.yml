name: Deploy Development
on:
  push:
    branches: [develop]

jobs:
  deploy:
    runs-on: [self-hosted, blue]
    steps:
      - name: Deploy to blue.flippi.ai
        run: |
          cd /var/www/blue.flippi.ai
          echo "=== [$(date)] Starting deployment ==="
          
          # Reset and pull latest code
          git reset --hard HEAD
          git clean -fd
          git fetch origin develop
          git reset --hard origin/develop
          echo "Latest commit: $(git log -1 --oneline)"
          
          # Install backend dependencies
          echo "=== [$(date)] Installing backend dependencies ==="
          cd backend && npm install --production || exit 1
          
          # Install Python dependencies for FotoFlip in virtual environment
          echo "=== [$(date)] Installing Python dependencies for FotoFlip ==="
          set -euo pipefail
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -yq
          sudo apt-get install -yq python3 python3-pip python3-venv python3-dev
          cd /var/www/blue.flippi.ai
          python3 -m venv .venv || true
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          python - <<'PY'
from rembg import new_session; new_session('u2net'); print("MODEL_OK")
PY
          deactivate
          
          # Run database migrations
          echo "=== [$(date)] Running database migrations ==="
          export FEEDBACK_DB_PATH=/var/www/blue.flippi.ai/backend/flippi.db
          node scripts/run-growth-analytics-migration.js || echo "Migration already applied or failed"
          
          # Build frontend
          echo "=== [$(date)] Building frontend ==="
          cd ../mobile-app
          # Clean ALL caches and node_modules to fix build issues
          rm -rf node_modules .cache .expo dist web-build package-lock.json
          rm -rf /tmp/metro-* /tmp/haste-map-* /tmp/react-*
          # Clean user-specific expo cache
          rm -rf ~/.expo
          # Clean any babel cache
          rm -rf node_modules/.cache
          # Clean npm and expo caches
          npm cache clean --force
          npx expo prebuild --clear || true
          # Fresh install of dependencies
          npm install || exit 1
          # Verify the App.js has our changes
          echo "Checking App.js first line:"
          head -1 App.js
          # Force clear expo cache one more time before build
          npx expo start --clear --offline --no-dev --max-workers 1 &
          EXPO_PID=$!
          sleep 5
          kill $EXPO_PID 2>/dev/null || true
          # Build with clean cache
          echo "Starting expo export..."
          # Remove any existing dist directory first
          rm -rf dist
          npx expo export --platform web --output-dir dist --clear || { echo "ERROR: Expo export failed"; exit 1; }
          echo "Expo export completed"
          echo "Checking dist directory:"
          ls -la dist/ | head -10 || echo "ERROR: dist directory not found"
          
          # Copy web assets
          cp web-styles.css dist/ || echo "Warning: Could not copy web-styles.css"
          
          # Deploy nginx configuration
          echo "=== [$(date)] Deploying nginx configuration ==="
          bash scripts/deploy-nginx-template.sh blue.flippi.ai || echo "Nginx deployment failed"
          
          # Restart services with ecosystem config
          echo "=== [$(date)] Restarting services with ecosystem config ==="
          cd /var/www/blue.flippi.ai
          # Stop existing processes
          pm2 stop dev-backend dev-frontend || true
          # Set FOTOFLIP_PYTHON environment variable for PM2
          pm2 set FOTOFLIP_PYTHON /var/www/blue.flippi.ai/.venv/bin/python
          # Start with ecosystem config to ensure env vars are loaded
          pm2 start ecosystem.config.js
          sleep 5
          # Show PM2 status
          pm2 status
          
          # Verify deployment
          echo "=== [$(date)] Verifying deployment ==="
          curl -s http://localhost:3002/health || echo "Backend not responding"
          
          # Check what bundle was created
          echo "=== [$(date)] Checking deployed bundle ==="
          ls -la dist/_expo/static/js/web/ | tail -5
          
          echo "Deployment complete"
