name: Issue Automation

on:
  issues:
    types: [opened, closed, labeled]
  issue_comment:
    types: [created]

jobs:
  auto-assign:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Auto-assign based on labels
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);
            
            // Auto-assign based on issue type
            let assignee = null;
            
            if (labels.includes('bug')) {
              // Assign bugs to the last person who committed
              const commits = await github.rest.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1
              });
              
              if (commits.data.length > 0) {
                assignee = commits.data[0].author?.login;
              }
            }
            
            if (assignee && assignee !== 'github-actions[bot]') {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                assignees: [assignee]
              });
              
              console.log(`Assigned issue #${issue.number} to ${assignee}`);
            }

  link-pr-to-issue:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Check for related PRs
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            
            // Search for PRs that might fix this issue
            const searchQuery = issue.title.replace(/^(Bug|Feature|Test Failed):\s*/i, '');
            
            const prs = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:pr is:open "${searchQuery}"`,
              per_page: 5
            });
            
            if (prs.data.items.length > 0) {
              const links = prs.data.items
                .map(pr => `- #${pr.number}: ${pr.title}`)
                .join('\n');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ”— **Potentially related pull requests:**\n\n${links}\n\nIf any of these PRs fix this issue, please link them using "Fixes #${issue.number}" in the PR description.`
              });
            }

  handle-commands:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.action == 'created'
    
    steps:
      - name: Process bot commands
        uses: actions/github-script@v6
        with:
          script: |
            const comment = context.payload.comment;
            const issue = context.payload.issue;
            const body = comment.body.toLowerCase().trim();
            
            // Only process comments that start with /
            if (!body.startsWith('/')) return;
            
            const command = body.split(' ')[0];
            
            switch (command) {
              case '/test':
                // Trigger test workflow
                await github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'test-and-track.yml',
                  ref: 'main',
                  inputs: {
                    environment: body.includes('blue') ? 'blue' : 'green'
                  }
                });
                
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                  content: 'rocket'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: 'ðŸš€ Test workflow triggered! Check the [Actions tab](../actions) for progress.'
                });
                break;
                
              case '/assign':
                const assignee = body.split(' ')[1]?.replace('@', '');
                if (assignee) {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: [assignee]
                  });
                  
                  await github.rest.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                    content: '+1'
                  });
                }
                break;
                
              case '/label':
                const labels = body.split(' ').slice(1);
                if (labels.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    labels: labels
                  });
                  
                  await github.rest.reactions.createForIssueComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                    content: '+1'
                  });
                }
                break;
                
              case '/close':
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.reactions.createForIssueComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id,
                  content: '+1'
                });
                break;
                
              case '/help':
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `**Available commands:**
                  
- \`/test [blue|green]\` - Run tests on specified environment
- \`/assign @username\` - Assign issue to user
- \`/label label1 label2\` - Add labels to issue
- \`/close\` - Close the issue
- \`/help\` - Show this help message

**Automatic behaviors:**
- Failed tests create issues automatically
- Passing tests close related issues
- Issues are auto-assigned based on type
- Related PRs are linked automatically`
                });
                break;
            }

  track-metrics:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'closed'
    
    steps:
      - name: Calculate resolution time
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            
            // Calculate time to resolution
            const created = new Date(issue.created_at);
            const closed = new Date(issue.closed_at);
            const hoursToResolve = (closed - created) / (1000 * 60 * 60);
            
            // Add a comment with metrics
            const labels = issue.labels.map(l => l.name);
            const wasAutomated = labels.includes('automated');
            const wasTestFailure = labels.includes('test-failure');
            
            let message = `ðŸ“Š **Issue Metrics:**\n\n`;
            message += `- Time to resolution: ${hoursToResolve.toFixed(1)} hours\n`;
            message += `- Type: ${labels.join(', ')}\n`;
            
            if (wasTestFailure) {
              message += `- Origin: Automated test failure\n`;
              message += `\nâœ… Test failure resolved!`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: message
            });