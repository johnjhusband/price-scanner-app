name: Setup SSL Certificate

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup SSL for'
        required: true
        type: choice
        options:
          - blue
          - green
          - production
      email:
        description: 'Email for Let\'s Encrypt notifications'
        required: true
        type: string
        default: 'admin@flippi.ai'

jobs:
  setup-ssl:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set environment variables
        run: |
          case "${{ github.event.inputs.environment }}" in
            "blue")
              echo "DOMAIN=blue.flippi.ai" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=BLUE_SERVER_SSH_KEY" >> $GITHUB_ENV
              echo "HOST_SECRET=BLUE_SERVER_HOST" >> $GITHUB_ENV
              ;;
            "green")
              echo "DOMAIN=green.flippi.ai" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=GREEN_SERVER_SSH_KEY" >> $GITHUB_ENV
              echo "HOST_SECRET=GREEN_SERVER_HOST" >> $GITHUB_ENV
              ;;
            "production")
              echo "DOMAIN=app.flippi.ai" >> $GITHUB_ENV
              echo "SSH_KEY_SECRET=PROD_SERVER_SSH_KEY" >> $GITHUB_ENV
              echo "HOST_SECRET=PROD_SERVER_HOST" >> $GITHUB_ENV
              ;;
          esac
      
      - name: Check DNS propagation
        run: |
          echo "Checking DNS for ${{ env.DOMAIN }}..."
          
          # Get the server IP from secrets
          SERVER_IP="${{ secrets[env.HOST_SECRET] }}"
          
          # Check current DNS resolution
          RESOLVED_IP=$(dig +short ${{ env.DOMAIN }} | tail -n1)
          
          echo "Server IP: $SERVER_IP"
          echo "DNS resolves to: $RESOLVED_IP"
          
          if [ "$RESOLVED_IP" != "$SERVER_IP" ]; then
            echo "‚ùå DNS not yet pointing to server!"
            echo "Please update DNS for ${{ env.DOMAIN }} to point to $SERVER_IP"
            exit 1
          fi
          
          echo "‚úÖ DNS is correctly configured"
      
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets[env.SSH_KEY_SECRET] }}" > ~/.ssh/flippi_key
          chmod 600 ~/.ssh/flippi_key
          
          # Add server to known hosts
          ssh-keyscan -H ${{ secrets[env.HOST_SECRET] }} >> ~/.ssh/known_hosts 2>/dev/null || true
      
      - name: Install SSL certificate
        run: |
          echo "Installing SSL certificate for ${{ env.DOMAIN }}..."
          
          # Run certbot on the server
          ssh -i ~/.ssh/flippi_key root@${{ secrets[env.HOST_SECRET] }} << 'EOF'
            # Ensure certbot is installed
            which certbot || apt-get update && apt-get install -y certbot python3-certbot-nginx
            
            # Install certificate
            certbot --nginx \
              -d ${{ env.DOMAIN }} \
              --non-interactive \
              --agree-tos \
              --email ${{ github.event.inputs.email }} \
              --redirect
            
            # Test nginx configuration
            nginx -t
            
            # Reload nginx
            systemctl reload nginx
            
            echo "‚úÖ SSL certificate installed successfully"
EOF
      
      - name: Fix SSL configuration files if needed
        run: |
          ssh -i ~/.ssh/flippi_key root@${{ secrets[env.HOST_SECRET] }} << 'EOF'
            # Create SSL configuration files if missing
            mkdir -p /etc/letsencrypt
            
            if [ ! -f /etc/letsencrypt/options-ssl-nginx.conf ]; then
              cat > /etc/letsencrypt/options-ssl-nginx.conf << 'SSL_OPTIONS'
ssl_session_cache shared:le_nginx_SSL:10m;
ssl_session_timeout 1440m;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers off;
ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
SSL_OPTIONS
            fi
            
            if [ ! -f /etc/letsencrypt/ssl-dhparams.pem ]; then
              openssl dhparam -out /etc/letsencrypt/ssl-dhparams.pem 2048
            fi
            
            # Test and reload nginx
            nginx -t && systemctl reload nginx
EOF
      
      - name: Verify HTTPS
        run: |
          echo "Verifying HTTPS setup..."
          
          # Wait a moment for nginx to reload
          sleep 5
          
          # Test HTTPS endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/health || echo "000")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ HTTPS is working! Site is accessible at https://${{ env.DOMAIN }}"
          else
            echo "‚ö†Ô∏è  HTTPS returned status code: $HTTP_CODE"
            echo "This might be normal if the health endpoint requires authentication"
            
            # Try the main page
            MAIN_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/ || echo "000")
            echo "Main page status: $MAIN_CODE"
            
            if [ "$MAIN_CODE" = "200" ]; then
              echo "‚úÖ Main page is accessible via HTTPS"
            fi
          fi
      
      - name: Setup auto-renewal
        run: |
          ssh -i ~/.ssh/flippi_key root@${{ secrets[env.HOST_SECRET] }} << 'EOF'
            # Ensure auto-renewal is enabled
            systemctl enable certbot.timer
            systemctl start certbot.timer
            
            # Test renewal
            certbot renew --dry-run
            
            echo "‚úÖ Auto-renewal configured"
EOF
      
      - name: Final verification and summary
        run: |
          # Get certificate details
          CERT_INFO=$(ssh -i ~/.ssh/flippi_key root@${{ secrets[env.HOST_SECRET] }} \
            "certbot certificates 2>/dev/null | grep -A 3 '${{ env.DOMAIN }}' || echo 'No certificate found'")
          
          # Test multiple endpoints
          echo "Testing HTTPS endpoints..."
          HTTPS_HOME=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/ || echo "000")
          HTTPS_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/health || echo "000")
          HTTPS_API=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.DOMAIN }}/api/version || echo "000")
          HTTP_REDIRECT=$(curl -s -o /dev/null -w "%{http_code}" -L http://${{ env.DOMAIN }}/ || echo "000")
          
          # Create GitHub summary
          echo "## üîí SSL Certificate Setup Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Certificate Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Domain**: https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Email**: ${{ github.event.inputs.email }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### HTTPS Status" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | Status Code |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Homepage (/) | $HTTPS_HOME |" >> $GITHUB_STEP_SUMMARY
          echo "| Health (/health) | $HTTPS_HEALTH |" >> $GITHUB_STEP_SUMMARY
          echo "| API (/api/version) | $HTTPS_API |" >> $GITHUB_STEP_SUMMARY
          echo "| HTTP‚ÜíHTTPS Redirect | $HTTP_REDIRECT |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Certificate Info" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$CERT_INFO" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Auto-renewal is configured" >> $GITHUB_STEP_SUMMARY
          echo "The certificate will automatically renew before expiration." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the site at https://${{ env.DOMAIN }}" >> $GITHUB_STEP_SUMMARY
          echo "2. Update any hardcoded HTTP URLs to HTTPS" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor certificate expiration (auto-renews 30 days before expiry)" >> $GITHUB_STEP_SUMMARY
          
          # Console output for CLI capture
          echo "::notice::SSL_SETUP_COMPLETE"
          echo "::notice::DOMAIN=https://${{ env.DOMAIN }}"
          echo "::notice::HTTPS_STATUS=$HTTPS_HOME"
          echo "::notice::HTTP_REDIRECT=$HTTP_REDIRECT"
          echo "::notice::AUTO_RENEWAL=ENABLED"
          
          # Output certificate info
          echo "::group::Certificate Details"
          echo "$CERT_INFO"
          echo "::endgroup::"
          
          # Structured output for reporting
          echo "=================================="
          echo "‚úÖ SSL SETUP COMPLETE"
          echo "=================================="
          echo "Domain: https://${{ env.DOMAIN }}"
          echo "HTTPS Homepage: $HTTPS_HOME"
          echo "HTTPS Health: $HTTPS_HEALTH"
          echo "HTTPS API: $HTTPS_API"
          echo "HTTP‚ÜíHTTPS Redirect: $HTTP_REDIRECT"
          echo "Auto-renewal: ENABLED"
          echo ""
          echo "SITE IS READY: https://${{ env.DOMAIN }}"
          echo ""
          if [ "$HTTPS_HOME" != "200" ]; then
            echo "‚ö†Ô∏è  WARNING: Homepage returned $HTTPS_HOME instead of 200"
            echo "This may be normal if authentication is required"
          fi