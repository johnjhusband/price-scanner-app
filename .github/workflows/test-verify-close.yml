name: Test, Verify, and Close Issues

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run tests against deployed environments every hour
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'green'
        type: choice
        options:
          - green
          - blue

jobs:
  run-tests:
    runs-on: ubuntu-latest
    outputs:
      test-results: ${{ steps.test.outputs.results }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: |
          npm ci
          npx playwright install --with-deps
      
      - name: Run Playwright tests
        id: test
        run: |
          # Set test URL based on environment
          if [ "${{ github.event.inputs.environment }}" == "blue" ]; then
            export TEST_ENV=blue
          else
            export TEST_ENV=green
          fi
          
          # Run tests and capture results
          npx playwright test --reporter=json > test-results.json || true
          
          # Parse results
          PASSED=$(jq '.stats.passed' test-results.json)
          FAILED=$(jq '.stats.failed' test-results.json)
          
          echo "results={\"passed\":$PASSED,\"failed\":$FAILED}" >> $GITHUB_OUTPUT
          
          # Fail job if tests failed
          if [ "$FAILED" -gt 0 ]; then
            exit 1
          fi

  process-test-results:
    needs: run-tests
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Find and close related issues
        uses: actions/github-script@v6
        with:
          script: |
            // Parse commit messages to find issue references
            const commits = context.payload.commits || [];
            const issueNumbers = new Set();
            
            // Look for "Implements #123" pattern in commits
            commits.forEach(commit => {
              const matches = commit.message.match(/(?:implements?|addresses?|relates?\s+to)\s+#(\d+)/gi);
              if (matches) {
                matches.forEach(match => {
                  const num = match.match(/#(\d+)/)[1];
                  issueNumbers.add(num);
                });
              }
            });
            
            // Also check PR description if this is a PR
            if (context.payload.pull_request) {
              const prBody = context.payload.pull_request.body || '';
              const matches = prBody.match(/(?:implements?|addresses?|relates?\s+to)\s+#(\d+)/gi);
              if (matches) {
                matches.forEach(match => {
                  const num = match.match(/#(\d+)/)[1];
                  issueNumbers.add(num);
                });
              }
            }
            
            // For each related issue, add success comment and close
            for (const issueNum of issueNumbers) {
              try {
                // Add success comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNum),
                  body: `## âœ… Automated Tests Passed!
                  
All tests have passed in the **${{ github.event.inputs.environment || 'green' }}** environment.

**Test Summary:**
- Passed: ${{ fromJson(needs.run-tests.outputs.test-results).passed }}
- Failed: ${{ fromJson(needs.run-tests.outputs.test-results).failed }}
- Environment: https://${{ github.event.inputs.environment || 'green' }}.flippi.ai
- Commit: ${context.sha}
- Workflow: [Run #${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

This issue is being automatically closed as all acceptance criteria have been verified by automated tests.`
                });
                
                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNum),
                  state: 'closed'
                });
                
                console.log(`Closed issue #${issueNum} after tests passed`);
              } catch (error) {
                console.error(`Failed to process issue #${issueNum}:`, error);
              }
            }

  handle-test-failures:
    needs: run-tests
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Create or update failure issues
        uses: actions/github-script@v6
        with:
          script: |
            const testResults = ${{ needs.run-tests.outputs.test-results || '{"passed":0,"failed":0}' }};
            
            // Create an issue for the test failure
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Test Failure: ${testResults.failed} tests failed in ${{ github.event.inputs.environment || 'green' }} environment`,
              body: `## ðŸš¨ Automated Test Failure
              
**Environment:** ${{ github.event.inputs.environment || 'green' }}
**Failed Tests:** ${testResults.failed}
**Passed Tests:** ${testResults.passed}
**Commit:** ${context.sha}
**Workflow Run:** [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

### Next Steps:
1. Review the test logs
2. Fix the failing tests
3. Re-run this workflow

### Debug Commands:
\`\`\`bash
# Run tests locally
TEST_ENV=${{ github.event.inputs.environment || 'green' }} npx playwright test

# Run with UI for debugging
TEST_ENV=${{ github.event.inputs.environment || 'green' }} npx playwright test --ui
\`\`\``,
              labels: ['bug', 'test-failure', 'automated']
            });
            
            console.log(`Created issue #${issue.data.number} for test failures`);

  scheduled-environment-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Test all environments
        uses: actions/github-script@v6
        with:
          script: |
            // Trigger tests for both environments
            const environments = ['blue', 'green'];
            
            for (const env of environments) {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'test-verify-close.yml',
                ref: 'main',
                inputs: {
                  environment: env
                }
              });
              
              console.log(`Triggered tests for ${env} environment`);
            }