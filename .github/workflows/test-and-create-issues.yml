name: Test and Create Issues

on:
  push:
    branches: [ main, master, develop, staging, test ]
  pull_request:
    branches: [ main, master, develop, staging, test ]
  workflow_dispatch:

jobs:
  test-environments:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [dev, test, prod]
        include:
          - environment: dev
            url: https://blue.flippi.ai
          - environment: test  
            url: https://green.flippi.ai
          - environment: prod
            url: https://app.flippi.ai
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Test ${{ matrix.environment }} environment
        id: test
        run: |
          echo "Testing ${{ matrix.environment }} at ${{ matrix.url }}"
          
          # Test 1: Health check
          echo "::group::Health Check"
          health_status=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.url }}/health || echo "000")
          if [ "$health_status" = "200" ]; then
            echo "‚úÖ Health check passed"
            echo "health_check=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Health check failed (status: $health_status)"
            echo "health_check=failed" >> $GITHUB_OUTPUT
            echo "health_error=Health endpoint returned $health_status" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
          
          # Test 2: Frontend loads
          echo "::group::Frontend Check"
          frontend_status=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.url }} || echo "000")
          if [ "$frontend_status" = "200" ]; then
            echo "‚úÖ Frontend loads"
            echo "frontend_check=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Frontend failed (status: $frontend_status)"
            echo "frontend_check=failed" >> $GITHUB_OUTPUT
            echo "frontend_error=Frontend returned $frontend_status" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
          
          # Test 3: Check for required UI elements
          echo "::group::UI Elements Check"
          page_content=$(curl -s ${{ matrix.url }} || echo "")
          if echo "$page_content" | grep -q "My Thrifting Buddy"; then
            echo "‚úÖ App title found"
            echo "ui_check=passed" >> $GITHUB_OUTPUT
          else
            echo "‚ùå App title not found"
            echo "ui_check=failed" >> $GITHUB_OUTPUT
            echo "ui_error=Page missing 'My Thrifting Buddy' title" >> $GITHUB_OUTPUT
          fi
          echo "::endgroup::"
          
          # Overall status
          if [ "$health_status" = "200" ] && [ "$frontend_status" = "200" ] && echo "$page_content" | grep -q "My Thrifting Buddy"; then
            echo "overall_status=passed" >> $GITHUB_OUTPUT
          else
            echo "overall_status=failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Create issue if tests failed
        if: steps.test.outputs.overall_status == 'failed'
        uses: actions/github-script@v6
        with:
          script: |
            const environment = '${{ matrix.environment }}';
            const url = '${{ matrix.url }}';
            
            // Build failure details
            let failures = [];
            if ('${{ steps.test.outputs.health_check }}' === 'failed') {
              failures.push('- Health Check: ${{ steps.test.outputs.health_error }}');
            }
            if ('${{ steps.test.outputs.frontend_check }}' === 'failed') {
              failures.push('- Frontend: ${{ steps.test.outputs.frontend_error }}');
            }
            if ('${{ steps.test.outputs.ui_check }}' === 'failed') {
              failures.push('- UI Elements: ${{ steps.test.outputs.ui_error }}');
            }
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: `test-failure,env:${environment}`
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(`${environment} environment failing`)
            );
            
            if (!existingIssue) {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Test Failure: ${environment} environment failing`,
                body: `## Automated Test Failure Report
                
**Environment**: ${environment}
**URL**: ${url}
**Time**: ${new Date().toISOString()}
**Commit**: ${context.sha}

### Failed Tests:
${failures.join('\n')}

### Quick Debug:
\`\`\`bash
# Check if site is up
curl -I ${url}

# Check health endpoint
curl ${url}/health

# Check Docker containers (on server)
ssh root@157.245.142.145 "docker ps | grep ${environment}"
\`\`\`

### For AI Coder:
Please investigate and fix the ${environment} environment. Common issues:
1. Docker container not running
2. Nginx configuration error
3. SSL certificate issue
4. Backend not responding

**Priority**: ${environment === 'production' ? 'P1-CRITICAL' : 'P2-HIGH'}`,
                labels: ['bug', 'test-failure', `env:${environment}`, 'automated']
              });
              
              console.log(`Created issue for ${environment} failures`);
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## üîÑ Test Still Failing
                
**Time**: ${new Date().toISOString()}
**Commit**: ${context.sha}

### Current Failures:
${failures.join('\n')}

This issue is still occurring. Please prioritize fixing.`
              });
              
              console.log(`Updated existing issue #${existingIssue.number}`);
            }
      
      - name: Close issue if tests passed
        if: steps.test.outputs.overall_status == 'passed'
        uses: actions/github-script@v6
        with:
          script: |
            const environment = '${{ matrix.environment }}';
            
            // Find open issues for this environment
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: `test-failure,env:${environment}`
            });
            
            for (const issue of issues.data) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## ‚úÖ Tests Now Passing!
                
All tests for ${environment} are now passing.
- Health check: ‚úÖ
- Frontend: ‚úÖ  
- UI elements: ‚úÖ

**Verified at**: ${new Date().toISOString()}
**Commit**: ${context.sha}

Closing this issue automatically.`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              console.log(`Closed issue #${issue.number} - ${environment} is healthy`);
            }

  code-quality-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for common issues
        id: quality
        run: |
          echo "Checking code quality..."
          
          # Check 1: Large files
          large_files=$(find . -type f -size +5M | grep -v node_modules | grep -v .git || true)
          if [ ! -z "$large_files" ]; then
            echo "large_files_found=true" >> $GITHUB_OUTPUT
            echo "large_files_list<<EOF" >> $GITHUB_OUTPUT
            echo "$large_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
          # Check 2: TODO comments
          todos=$(grep -r "TODO\|FIXME\|HACK" --include="*.js" --include="*.jsx" --exclude-dir=node_modules . || true)
          if [ ! -z "$todos" ]; then
            echo "todos_found=true" >> $GITHUB_OUTPUT
            echo "todos_list<<EOF" >> $GITHUB_OUTPUT
            echo "$todos" | head -20 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create code quality issue
        if: steps.quality.outputs.large_files_found == 'true' || steps.quality.outputs.todos_found == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            let issueBody = `## üìù Code Quality Report
            
Found some items that need attention:
`;
            
            if ('${{ steps.quality.outputs.large_files_found }}' === 'true') {
              issueBody += `
### Large Files Detected
These files are over 5MB and should be reviewed:
\`\`\`
${{ steps.quality.outputs.large_files_list }}
\`\`\`
`;
            }
            
            if ('${{ steps.quality.outputs.todos_found }}' === 'true') {
              issueBody += `
### TODO/FIXME Comments Found
These need to be addressed:
\`\`\`
${{ steps.quality.outputs.todos_list }}
\`\`\`
`;
            }
            
            issueBody += `
### For AI Coder:
Please review and address these code quality issues. Priority: P3-LOW`;
            
            // Only create if doesn't exist
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'code-quality'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Code Quality: Review needed',
                body: issueBody,
                labels: ['code-quality', 'automated', 'p3-low']
              });
            }

  deployment-readiness:
    needs: test-environments
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Check deployment status
        run: |
          echo "## üöÄ Deployment Readiness Check"
          echo ""
          echo "All environment tests completed. Check issues for any failures."
          echo "If no test-failure issues are open, environments are ready for promotion."